// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  ADMIN
  MANAGER
  STAFF
}

enum Department {
  SALES
  MARKETING
  FINANCE
  MANAGEMENT
}

enum PaymentMode {
  CASH
  CARD
  UPI
  OTHER
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  RETURNED
}

enum StockChangeType {
  PURCHASE_IN
  SALE_OUT
  RETURN_TO_SUPPLIER
  MANUAL_ADJUSTMENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
  HALF_DAY
}

// MODELs
model Shop {
  id        String   @id @default(uuid())
  name      String
  location  String
  ownerId   String?
  attendees User[]   @relation("ShopAttendees")
  User      User[] // other users (e.g., employees assigned via shopId)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Inventory Inventory[]
  Purchase  Purchase[]
  StockLog  StockLog[]
  Sales     Sales[]
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  firstName      String
  lastName       String?
  hashedPassword String
  role           Role         @default(STAFF)
  isActive       Boolean?     @default(true)
  shopId         String?
  joinDate       String?
  department     Department?  @default(SALES)
  shop           Shop?        @relation(fields: [shopId], references: [id])
  attendances    Attendance[]
  shopsAttended  Shop[]       @relation("ShopAttendees")

  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Attendance {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  date        DateTime          @default(now())
  checkIn     DateTime?
  checkOut    DateTime?
  isCheckedIn Boolean?          @default(false)
  status      AttendanceStatus? @default(PRESENT)
  workedHours Float?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([userId, date])
}

model Warehouses {
  id          String   @id @default(uuid())
  name        String   @unique
  location    String
  capacity    Int?
  minCapacity Int?
  maxCapacity Int?
  createdBy   String? //user id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Inventory Inventory[]
  Products  Products[]
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String?    @unique
  parentId String? // Nullable for top-level categories
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  createdBy String?

  products  Products[] // One-to-many with Product
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Products {
  id           String   @id @default(uuid())
  name         String
  description  String?
  slug         String?  @unique
  price        String
  categoryId   String
  imageDetails Json?
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  color        String?
  size         String?
  material     String?
  weight       String?

  createdBy String?

  suppliersId String?
  Suppliers   Suppliers? @relation(fields: [suppliersId], references: [id])

  Inventory    Inventory[]
  PurchaseItem PurchaseItem[]
  StockLog     StockLog[]
  SaleItem     SaleItem[]
  Warehouses   Warehouses?    @relation(fields: [warehousesId], references: [id])
  warehousesId String?
}

model Suppliers {
  id       String   @id @default(uuid())
  name     String
  email    String?
  phone    String
  address  String?
  website  String?
  isActive Boolean? @default(true)
  gstid    String   @unique

  createdBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Products[]
  Purchase Purchase[]
}

model Inventory {
  id        String @id @default(uuid())
  productId String
  shopId    String

  quantity Int @default(0)

  warehouseId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shop      Shop       @relation(fields: [shopId], references: [id])
  product   Products   @relation(fields: [productId], references: [id])
  warehouse Warehouses @relation(fields: [warehouseId], references: [id])

  @@unique([shopId, productId])
}

model Purchase {
  id           String         @id @default(uuid())
  shopId       String
  shop         Shop           @relation(fields: [shopId], references: [id])
  supplierId   String
  Suppliers    Suppliers      @relation(fields: [supplierId], references: [id])
  purchaseDate DateTime       @default(now())
  totalAmount  Float
  status       PurchaseStatus @default(PENDING) // PENDING, RECEIVED, RETURNED

  purchaseItems PurchaseItem[]

  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseItem {
  id          String @id @default(uuid())
  purchaseId  String
  productId   String
  quantity    Int
  unitPrice   Float
  receivedQty Int    @default(0)
  returnedQty Int    @default(0)

  product  Products @relation(fields: [productId], references: [id])
  purchase Purchase @relation(fields: [purchaseId], references: [id])

  @@unique([purchaseId, productId])
}

model StockLog {
  id         String          @id @default(uuid())
  productId  String
  shopId     String
  changeType StockChangeType
  quantity   Int
  reason     String?
  createdAt  DateTime        @default(now())

  product Products @relation(fields: [productId], references: [id])
  shop    Shop     @relation(fields: [shopId], references: [id])
}

model Customer {
  id      String  @id @default(uuid())
  name    String
  phone   String
  email   String?
  address String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sales     Sales[]
}

model Sales {
  id          String      @id @default(uuid())
  shopId      String
  customerId  String
  saleDate    DateTime    @default(now())
  totalAmount Float
  paymentMode PaymentMode
  invoiceNo   String      @unique

  shop      Shop       @relation(fields: [shopId], references: [id])
  customer  Customer   @relation(fields: [customerId], references: [id])
  saleItems SaleItem[]
}

model SaleItem {
  id        String @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Float

  sale    Sales    @relation(fields: [saleId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}

model Comments {
  id        String @id @default(uuid())
  productId String
  comment   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @db.Text
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}
